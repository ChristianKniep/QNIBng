input {
    udp {
        port => 5544
        type => "qnibng"
    }
    #file {
    #    sincedb_path => "/var/run/logstash/opensm.log.since"
    #    path => "/var/log/opensm.log"
    #    type => "opensm-log"
    #}
}

filter {
    if [type] == "opensm-log" {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "message" => "%{OSM_PM_PRELOG} %{OSM_PM_STATS}" }
            add_tag => "mad_stats"
        }
    }
    if [type] == "qnibng" {
        grok {
            # Generic trap type 1; event 128; from LID 0x1
            match => { "message" => "Generic trap type %{POSINT:trap_type}; event %{POSINT:event_type}; from LID 0x(?<lid_hex>[0-9A-F]+)" }
            add_tag => "gen_trap"
            add_field => [ "event_t", "%{event_type}" ]
        } 
        grok {
            # PortDown; Event 65; SwitchLID 0x1; nodeGUID 504420750451539968
            match => { "message" => "PortDown; Event %{POSINT:event_type}; SwitchLID 0x(?<lid_hex>[0-9A-F]+); nodeGUID %{POSINT:nguid}" }
            add_tag => [ "port", "port_down"]
            add_field => [ "event_t", "%{event_type}" ]
            add_field => [ "node_guid", "%{nguid}" ]
        }
        grok {
           # PortUp; Event 64; SwitchLID 0x1; nodeGUID 504420750451539968
            match => { "message" => "PortUp; Event %{POSINT:event_type}; SwitchLID 0x(?<lid_hex>[0-9A-F]+); nodeGUID %{POSINT:nguid}" }
            add_tag => [ "port", "port_up"]
            add_field => [ "event_t", "%{event_type}" ]
            add_field => [ "node_guid", "%{nguid}" ]
        }
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "message" => "%{OSM_PM_STATS}" }
            add_tag => "mad_stats"
        }
    }
}

output { 
    if ("gen_trap" in [tags]) {
        http {
            http_method => 'post'
            url => 'http://127.0.0.1:80/events/'
            mapping => [ 
                "data", "%{message}", 
                "what", "TRAP: Event %{event_t} at switch LID %{lid_hex}", 
                "tags", "lid%{lid_hex}, event%{event_t}" 
            ]
        }
    } else if ("port_down" in [tags]) {
        http {
            http_method => 'post'
            url => 'http://127.0.0.1:80/events/'
            mapping => [ 
               "data", "%{message}", 
               "what", "PortDown: GUID %{node_guid}", 
               "tags", "ib, portdown, node_guid%{node_guid}" 
            ]
        }
    } else if ("port_up" in [tags]) {
        http {
            http_method => 'post'
            url => 'http://127.0.0.1:80/events/'
            mapping => [ 
               "data", "%{message}", 
               "what", "PortUp: GUID %{node_guid}", 
               "tags", "ib, portup, guid%{node_guid}" ]
        }
    } else if ("mad_stats" in [tags]) {
        #stdout { debug => true }
        statsd {
            sender => ""
            namespace => "osm"
            gauge => [ "sweep_time", "%{osm_sweep_time}" ]
            gauge => [ "mad_stats.min", "%{osm_mad_min}" ]
            gauge => [ "mad_stats.max", "%{osm_mad_max}" ]
            gauge => [ "mad_stats.avg", "%{osm_mad_avg}" ]
        }
    } else {
        #stdout { debug => true }
    
    }
  #elasticsearch_http { 
  #  host => "localhost" 
  #}
  #file { path => "/tmp/logstash.out" }
}
